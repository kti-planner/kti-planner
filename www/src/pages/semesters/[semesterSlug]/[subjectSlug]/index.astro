---
import { Classroom } from '@backend/classroom';
import { Exercise } from '@backend/exercise';
import { Semester } from '@backend/semester';
import { Subject } from '@backend/subject';
import type { ClassroomData } from '@components/classrooms/types';
import type { SemesterData } from '@components/semesters/types';
import type { SubjectData } from '@components/subjects/types';
import { formatDateLocalYyyyMmDd } from '@components/utils';
import Layout from '@layouts/Layout.astro';
import AddExercise from '@components/exercises/AddExercise.vue';
import EditSubject from '@components/subjects/EditSubject.vue';

const { semesterSlug, subjectSlug } = Astro.params;
const { langId, user } = Astro.locals;

const translations = {
    'en': {
        'Semesters': 'Semesters',
        'Winter semester': 'Winter semester',
        'Summer semester': 'Summer semester',
    },
    'pl': {
        'Semesters': 'Semestry',
        'Winter semester': 'Semestr zimowy',
        'Summer semester': 'Semestr letni',
    },
};

function translate(text: keyof (typeof translations)[LangId]): string {
    return translations[langId][text];
}

if (semesterSlug === undefined || subjectSlug === undefined) {
    return new Response(null, { status: 404 });
}

const semester = await Semester.fetchBySlug(semesterSlug);
if (!semester) {
    return new Response(null, { status: 404 });
}

const semesterName = `${semester.type === 'summer' ? translate('Summer semester') : translate('Winter semester')} ${semester.year}/${semester.year + 1}`;

const subject = await Subject.fetchBySlug(semester, subjectSlug);
if (!subject) {
    return new Response(null, { status: 404 });
}

const semesterData: SemesterData = {
    id: semester.id,
    type: semester.type,
    year: semester.year,
    slug: semester.slug,
    startDate: formatDateLocalYyyyMmDd(semester.startDate),
    endDate: formatDateLocalYyyyMmDd(semester.endDate),
};

const subjectData: SubjectData = {
    id: subject.id,
    name: subject.name,
    semesterId: subject.semesterId,
    slug: subject.slug,
};

const exercises = await Exercise.fetchAllFromSubject(subject);
const nextExerciseNumber = exercises.map(e => e.exerciseNumber).reduce((max, num) => Math.max(max, num), 0) + 1;

const classrooms = await Classroom.fetchAll();

const classroomsData: ClassroomData[] = classrooms.map(classroom => ({
    id: classroom.id,
    name: classroom.name,
}));
---

<Layout
    breadcrumbs={[
        {
            text: translate('Semesters'),
            href: '/semesters/',
        },
        {
            text: semesterName,
            href: `/semesters/${semesterSlug}/`,
        },
        {
            text: subject.name,
            href: '#',
        },
    ]}
>
    <h1 class="text-center fs-5">
        {subject.name}
        {user && <EditSubject client:only="vue" semester={semesterData} subject={subjectData} />}
    </h1>
    <div class="my-2">
        {
            user && (
                <AddExercise
                    client:only="vue"
                    semester={semesterData}
                    subject={subjectData}
                    classrooms={classroomsData}
                    nextExerciseNumber={nextExerciseNumber}
                />
            )
        }
    </div>
    <div class="exercises-list list-group mx-auto my-4">
        {
            exercises.map(
                e =>
                    (
                        <a
                            href={`/semesters/${semesterSlug}/${subjectSlug}/${e.exerciseNumber}/`}
                            class="list-group-item list-group-item-action"
                        >
                            {e.name}
                        </a>
                    ) as unknown,
            )
        }
    </div>
</Layout>

<style>
    .exercises-list {
        max-width: 600px;
    }
</style>
